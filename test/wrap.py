#!/usr/bin/env python2

from qform import *


def test_const():
    output("""\
    const_cov:{
        `type`domain~@'[{.qml.const x};0h,-1;`$]};""")
    test("const_cov", qstr("1b"))

def test_wrap():
    """Check type handling in functions generated by wrap.h."""
    output("""\
    wrap_F_cov:{
        (-9h;9h;`type)[0 0 0 2 1 1]~@'[type x@;(1;2.;3h;0x4;5 6;7 8 9.);`$]
        };
    wrap_FF_cov:{
        (-9h;9h;`type;`length)[(0 0 0 2 1 1;
                                0 0 0 2 1 1;
                                0 0 0 2 1 1;
                                2 2 2 2 2 2;
                                1 1 1 2 1 3;
                                1 1 1 2 3 1)]~
            @''[type x .;{x(;)\:/:x}(1;2.;3h;0x4;5 6;7 8 9.);`$]
        };
    wrap_iF_cov:{
        wrap_F_cov[x 0] and
            (-9h;9h;`type)[(0 2 0 2 2 2;
                            1 2 1 2 2 2)]~
                @''[type x .;(1;2.;3h;0x4;5 6;7 8 9.)(;)\:/:(0.;0 0.);`$]
        };
    wrap_fF_cov:{
        wrap_F_cov[x 0.] and
            (-9h;9h;`type)[(0 0 0 2 2 2;
                            1 1 1 2 2 2)]~
                @''[type x .;(1;2.;3h;0x4;5 6;7 8 9.)(;)\:/:(0.;0 0.);`$]
        };
    wrap_iiF_cov:{
        wrap_F_cov[x[0;0]] and
            (-9h;9h;`type)[(0 2 0 2 2 2;
                            2 2 2 2 2 2;
                            0 2 0 2 2 2;
                            2 2 2 2 2 2;
                            2 2 2 2 2 2;
                            2 2 2 2 2 2)|/:0 1]~
                @'''[type x .;{x(;)\:/:x}[(1;2.;3h;0x4;5 6;7 8 9.)],\:\:/:
                              enlist each(0.;0 0.);`$]
        };
    wrap_ffF_cov:{
        wrap_F_cov[x[0.;0.]] and
            (-9h;9h;`type)[(0 0 0 2 2 2;
                            0 0 0 2 2 2;
                            0 0 0 2 2 2;
                            2 2 2 2 2 2;
                            2 2 2 2 2 2;
                            2 2 2 2 2 2)|/:0 1]~
                @'''[type x .;{x(;)\:/:x}[(1;2.;3h;0x4;5 6;7 8 9.)],\:\:/:
                              enlist each(0.;0 0.);`$]
        };""")
    def emit(signature, funcs):
        for func in funcs.split():
            test("wrap_%s_cov[" % signature, qstr(".qml."+func), qstr("1b"))

    emit("F", "cos sin tan acos asin atan")
    emit("FF", "atan2")
    emit("F", "cosh sinh tanh acosh asinh atanh")
    emit("F", "exp log log10 logb expm1 log1p")
    emit("FF", "pow")
    emit("F", "floor ceil fabs")
    emit("FF", "fmod")
    emit("F", "erf erfc lgamma gamma j0 j1 y0 y1 sqrt cbrt")
    emit("FF", "hypot beta")
    emit("fF", "pgammar pgammarc ipgammarc")
    emit("ffF", "pbetar ipbetar")
    emit("F", "ncdf nicdf")
    emit("iF", "stcdf sticdf")
    emit("iiF", "fcdf ficdf")
    emit("fF", "c2cdf c2icdf")
    emit("ffF", "gcdf gicdf")
    emit("iiF", "bncdf bnicdf")
    emit("iF", "pscdf psicdf smcdf smicdf")
    emit("F", "kcdf kicdf")
    test("kicdf", qstr("1e-9"), None)

def test_lapack():
    def emit(name, parts, funcs):
        for func in funcs.split():
            for part in parts:
                test("lapack_%s[" % name, qstr(".qml."+func), part, qstr("1b"))

    output("""\
    lapack_nn_type:{
        f:@[{x y;}x;;`$];
        / too many calls in a single test makes debug_alloc loop slow
        $[y=0;all(::)~'f each((0 0;0 0.);(0 0.;0 0));
          y=1;all`type~'f each(0.;`;0 0.;();
            (0.;0 0.);(0.;0 0);(0 0.;0.);(0 0;0.));
          y=2;all`length~'f each(enlist 0 0.;
            (0 0.;0 0 0.);(0 0;0 0 0.);(0 0 0.;0 0.);(0 0 0;0 0.));
          '`]};""")
    emit("nn_type", range(3), "mdet minv mev mchol")

    output("""\
    lapack_mn_type:{
        f:@[{x y;}x;;`$];
        $[y=0;all(::)~'f each((0 0 0;0 0 0.);(0 0 0.;0 0 0));
          y=1;all`type~'f each(0.;`;0 0.;();enlist 0#0.;
            (0.;0 0.);(0.;0 0);(0 0.;0.);(0 0;0.));
          y=2;all`length~'f each(
            (0 0.;0 0 0.);(0 0;0 0 0.);(0 0.;0 0.;0 0 0.);(0 0;0 0.;0 0 0.));
          '`]};""")
    emit("mn_type", range(3), "mqr mqrp mlup msvd")

    output("""\
    lapack_nn_np_type:{
        f:.[{x[y;z];}x;;`$];
        $[y=0;all(::)~'f each(((0 0;0 0.);0 0);(((0 0;0 0.);(0 0 0.;0 0 0))));
          y=1;all`type~'f each(``;(`;0 0);((0 0;0 0.);`);
            ((0 0;0 0.);enlist 0#0);(();0#0));
          y=2;all`length~'f each(((0 0.;0 0 0.);0 0);((0 0;0 0.);(0 0;0 0 0.)));
          y=3;all`length~'f each(((0 0;0 0.);0 0 0);((0 0;0 0.);(0 0;0 0;0 0));
            ((0 0 0;0 0 0.);(0 0;0 0)));
          / not for .qml.mm:
          y=4;`length~f((0 0 0;0 0 0);0 0 0);
          '`]};
    lapack_mn_np_type:{
        f:.[{x[y;z];}x;;`$];
        $[y=0;(::)~f((0 0 0;0 0 0);0 0 0);
          '`]};
    lapack_0n_np_type:{
        f:.[{x[y;z];}x;;`$];
        $[y=0;all(::)~'f each
            (((1 1;0 1);0 0);((0 1;0 0);0 0);((1 0;1 1);0 0);((0 0;1 0);0 0));
          y=1;all`domain~'f each
            (((1 1;1 1);0 0);((0 1;1 0);0 0);((1 0 1;1 1 0;0 0 1);0 0 0));
          '`]};""")
    emit("nn_np_type", range(4), "mm")
    emit("mn_np_type", range(1), "mm")
    emit("nn_np_type", range(5), "ms")
    emit("0n_np_type", range(2), "ms")
    emit("nn_np_type", range(5), "mls mlsx`equi")

    output("""\
    lapack_mn_mp_type:{
        f:.[{x[y;z];}x;;`$];
        $[y=0;all(::)~'f each(((0 0;0 0);0 0);((0 0;0 0);(0 0;0 0)));
          y=1;all(::)~'f each(((0 0;0 0;0 0);0 0 0);((0 0 0;0 0 0);0 0));
          y=2;all(::)~'f each
            (((0 0;0 0;0 0);(0 0;0 0;0 0));((0 0 0;0 0 0);(0 0;0 0)));
          y=3;all`type~'f each(``;(`;0 0);((0 0;0 0);`));
          y=4;all`length~'f each(((0 0;0 0 0);0 0);((0 0;0 0);(0 0;0 0 0)));
          y=5;all`length~'f each
            (((0 0 0;0 0 0);0 0 0);((0 0 0;0 0 0);(0 0;0 0;0 0)));
            '`]};""")
    emit("mn_mp_type", range(6), "mlsq mlsqx`svd")

def test_poly():
    output("""\
    poly_type:{
        f:@[{.qml.poly x;};;`$];
        $[x=0;all(::)~'f each(1 0;(1.;0);(1;0.));
          x=1;all`type~'f each(`;``;(0.;0 0;`;0.);0.;0;(0.;(0.;0 0.));
            (1.;0 0.);(1 0;1);(1 0.;0 0.);(0.;());(0.;1#0.);(0.;3#0 0 0.));
          x=2;all`length~'f each(0#0.;());
          x=3;all`roots~'f each(0 1;0 0);
          '`]};""")
    for part in range(4):
        test("poly_type", part, qstr("1b"))

def test_lapack_opt():
    output("""\
    lapack_opt:{
        all`opt~'@[get;;`$]each((.qml.mlsx;`eqiu;0;0);(.qml.mlsqx;`sdv;0;0))};""")
    test("lapack_opt", qstr("1b"))


def tests():
    reps(25)
    prec("1e-3")
    test_const()
    test_wrap()
    test_lapack()
    test_poly()
    test_lapack_opt()

if __name__ == "__main__":
    tests()
