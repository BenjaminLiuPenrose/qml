if[any"-cd"~/:.z.x;
    .qml.dll:` sv hsym[`$system"cd"],`qml]; / full path stops Windows searching
stop:any"-stop"~/:.z.x;
verbose:any"-verbose"~/:.z.x;
patterns:.z.x 1+where"-like"~/:.z.x;

\l qml.q
-1"qml ",string .qml.version;

cmp:{
    $[all (t:type each (x;y)) within -9 -1h;
        (x=y) or $[y=0;1e-15|prec%1000;prec*abs y]>=0w^abs x-y;
      all t within 0 9h;
        $[count[x]=count y;all .z.s'[x;y];0b];
        0b]};

mttests:enlist[`]!enlist();
passed:total:2#0;
test:{
    if[not $[count patterns;any x like/:patterns;1b];:(::)];
    if[verbose;-1"Check ",x," = ",y];
    v:@[value;x;`$];
    if[$[8>system"s";0b;pass<>0;0b;reps=0;0b;-11h=type v;0b;
            (-11h=type p 0) and 0h=type p:parse x;1b;'`run];
        mttests[p 0],:enlist((v~value@;eval each p);reps)];
    total[pass]+:1;passed[pass]+:r:cmp[v;value y];
    if[not[r] and pass=0;
        -1"Failed ",x," = ",y;
        if[stop;`p`x`y set'(parse x;v;value y);'`stop]];
    };

mem:2#first system"w";
pass:-1;while[2>pass+:1;

    pi:.qml.pi;
    e:.qml.e;
    prec:1e-14;
    reps:0;
    test["pi";"3.141592653589793"];
    test["e ";"2.7182818284590452"];
    test[".qml.eps+1";"1"];
    test[".qml.eps>0";"1"];
    reps:10000;
---LIBM---
---MATRIX---
---MPMAT---
---CONMAX---
    const_cov:{
        `type`domain~@'[{.qml.const x};0h,-1;`$]};
    test["const_cov[]";"1b"];
    wrap_F_cov:{
        (-9h;9h;`type)[0 0 0 2 1 1]~@'[type x@;(1;2.;3h;0x4;5 6;7 8 9.);`$]
        };
    wrap_FF_cov:{
        (-9h;9h;`type;`length)[(0 0 0 2 1 1;
                                0 0 0 2 1 1;
                                0 0 0 2 1 1;
                                2 2 2 2 2 2;
                                1 1 1 2 1 3;
                                1 1 1 2 3 1)]~
            @''[type x .;{x(;)\:/:x}(1;2.;3h;0x4;5 6;7 8 9.);`$]
        };
    wrap_iF_cov:{
        wrap_F_cov[x 0] and
            (-9h;9h;`type)[(0 2 0 2 2 2;
                            1 2 1 2 2 2)]~
                @''[type x .;(1;2.;3h;0x4;5 6;7 8 9.)(;)\:/:(0.;0 0.);`$]
        };
    wrap_fF_cov:{
        wrap_F_cov[x 0.] and
            (-9h;9h;`type)[(0 0 0 2 2 2;
                            1 1 1 2 2 2)]~
                @''[type x .;(1;2.;3h;0x4;5 6;7 8 9.)(;)\:/:(0.;0 0.);`$]
        };
    wrap_iiF_cov:{
        wrap_F_cov[x[0;0]] and
            (-9h;9h;`type)[(0 2 0 2 2 2;
                            2 2 2 2 2 2;
                            0 2 0 2 2 2;
                            2 2 2 2 2 2;
                            2 2 2 2 2 2;
                            2 2 2 2 2 2)|/:0 1]~
                @'''[type x .;{x(;)\:/:x}[(1;2.;3h;0x4;5 6;7 8 9.)],\:\:/:
                              enlist each(0.;0 0.);`$]
        };
    wrap_ffF_cov:{
        wrap_F_cov[x[0.;0.]] and
            (-9h;9h;`type)[(0 0 0 2 2 2;
                            0 0 0 2 2 2;
                            0 0 0 2 2 2;
                            2 2 2 2 2 2;
                            2 2 2 2 2 2;
                            2 2 2 2 2 2)|/:0 1]~
                @'''[type x .;{x(;)\:/:x}[(1;2.;3h;0x4;5 6;7 8 9.)],\:\:/:
                              enlist each(0.;0 0.);`$]
        };
    test["wrap_F_cov[.qml.cos]";"1b"];
    test["wrap_F_cov[.qml.sin]";"1b"];
    test["wrap_F_cov[.qml.tan]";"1b"];
    test["wrap_F_cov[.qml.acos]";"1b"];
    test["wrap_F_cov[.qml.asin]";"1b"];
    test["wrap_F_cov[.qml.atan]";"1b"];
    test["wrap_FF_cov[.qml.atan2]";"1b"];
    test["wrap_F_cov[.qml.cosh]";"1b"];
    test["wrap_F_cov[.qml.sinh]";"1b"];
    test["wrap_F_cov[.qml.tanh]";"1b"];
    test["wrap_F_cov[.qml.acosh]";"1b"];
    test["wrap_F_cov[.qml.asinh]";"1b"];
    test["wrap_F_cov[.qml.atanh]";"1b"];
    test["wrap_F_cov[.qml.exp]";"1b"];
    test["wrap_F_cov[.qml.log]";"1b"];
    test["wrap_F_cov[.qml.log10]";"1b"];
    test["wrap_F_cov[.qml.logb]";"1b"];
    test["wrap_F_cov[.qml.expm1]";"1b"];
    test["wrap_F_cov[.qml.log1p]";"1b"];
    test["wrap_FF_cov[.qml.pow]";"1b"];
    test["wrap_F_cov[.qml.floor]";"1b"];
    test["wrap_F_cov[.qml.ceil]";"1b"];
    test["wrap_F_cov[.qml.fabs]";"1b"];
    test["wrap_FF_cov[.qml.fmod]";"1b"];
    test["wrap_F_cov[.qml.erf]";"1b"];
    test["wrap_F_cov[.qml.erfc]";"1b"];
    test["wrap_F_cov[.qml.lgamma]";"1b"];
    test["wrap_F_cov[.qml.gamma]";"1b"];
    test["wrap_F_cov[.qml.j0]";"1b"];
    test["wrap_F_cov[.qml.j1]";"1b"];
    test["wrap_F_cov[.qml.y0]";"1b"];
    test["wrap_F_cov[.qml.y1]";"1b"];
    test["wrap_F_cov[.qml.sqrt]";"1b"];
    test["wrap_F_cov[.qml.cbrt]";"1b"];
    test["wrap_FF_cov[.qml.hypot]";"1b"];
    test["wrap_FF_cov[.qml.beta]";"1b"];
    test["wrap_fF_cov[.qml.pgammar]";"1b"];
    test["wrap_fF_cov[.qml.pgammarc]";"1b"];
    test["wrap_fF_cov[.qml.ipgammarc]";"1b"];
    test["wrap_ffF_cov[.qml.pbetar]";"1b"];
    test["wrap_ffF_cov[.qml.ipbetar]";"1b"];
    test["wrap_F_cov[.qml.ncdf]";"1b"];
    test["wrap_F_cov[.qml.nicdf]";"1b"];
    test["wrap_iF_cov[.qml.stcdf]";"1b"];
    test["wrap_iF_cov[.qml.sticdf]";"1b"];
    test["wrap_iiF_cov[.qml.fcdf]";"1b"];
    test["wrap_iiF_cov[.qml.ficdf]";"1b"];
    test["wrap_fF_cov[.qml.c2cdf]";"1b"];
    test["wrap_fF_cov[.qml.c2icdf]";"1b"];
    test["wrap_ffF_cov[.qml.gcdf]";"1b"];
    test["wrap_ffF_cov[.qml.gicdf]";"1b"];
    test["wrap_iiF_cov[.qml.bncdf]";"1b"];
    test["wrap_iiF_cov[.qml.bnicdf]";"1b"];
    test["wrap_iF_cov[.qml.pscdf]";"1b"];
    test["wrap_iF_cov[.qml.psicdf]";"1b"];
    test["wrap_iF_cov[.qml.smcdf]";"1b"];
    test["wrap_iF_cov[.qml.smicdf]";"1b"];
    test["wrap_F_cov[.qml.kcdf]";"1b"];
    test["wrap_F_cov[.qml.kicdf]";"1b"];
    test[".qml.kicdf 1e-9";"0n"];
    lapack_nn_type:{
        f:@[{x y;}x;;`$];
        / too many calls in a single test makes debug_alloc loop slow
        $[y=0;all(::)~'f each((0 0;0 0.);(0 0.;0 0));
          y=1;all`type~'f each(0.;`;0 0.;();
            (0.;0 0.);(0.;0 0);(0 0.;0.);(0 0;0.));
          y=2;all`length~'f each(enlist 0 0.;
            (0 0.;0 0 0.);(0 0;0 0 0.);(0 0 0.;0 0.);(0 0 0;0 0.));
          '`]};
    test["lapack_nn_type[.qml.mdet;0]";"1b"];
    test["lapack_nn_type[.qml.mdet;1]";"1b"];
    test["lapack_nn_type[.qml.mdet;2]";"1b"];
    test["lapack_nn_type[.qml.minv;0]";"1b"];
    test["lapack_nn_type[.qml.minv;1]";"1b"];
    test["lapack_nn_type[.qml.minv;2]";"1b"];
    test["lapack_nn_type[.qml.mev;0]";"1b"];
    test["lapack_nn_type[.qml.mev;1]";"1b"];
    test["lapack_nn_type[.qml.mev;2]";"1b"];
    test["lapack_nn_type[.qml.mchol;0]";"1b"];
    test["lapack_nn_type[.qml.mchol;1]";"1b"];
    test["lapack_nn_type[.qml.mchol;2]";"1b"];
    lapack_mn_type:{
        f:@[{x y;}x;;`$];
        $[y=0;all(::)~'f each((0 0 0;0 0 0.);(0 0 0.;0 0 0));
          y=1;all`type~'f each(0.;`;0 0.;();enlist 0#0.;
            (0.;0 0.);(0.;0 0);(0 0.;0.);(0 0;0.));
          y=2;all`length~'f each(
            (0 0.;0 0 0.);(0 0;0 0 0.);(0 0.;0 0.;0 0 0.);(0 0;0 0.;0 0 0.));
          '`]};
    test["lapack_mn_type[.qml.mqr;0]";"1b"];
    test["lapack_mn_type[.qml.mqr;1]";"1b"];
    test["lapack_mn_type[.qml.mqr;2]";"1b"];
    test["lapack_mn_type[.qml.mqrp;0]";"1b"];
    test["lapack_mn_type[.qml.mqrp;1]";"1b"];
    test["lapack_mn_type[.qml.mqrp;2]";"1b"];
    test["lapack_mn_type[.qml.mlup;0]";"1b"];
    test["lapack_mn_type[.qml.mlup;1]";"1b"];
    test["lapack_mn_type[.qml.mlup;2]";"1b"];
    test["lapack_mn_type[.qml.msvd;0]";"1b"];
    test["lapack_mn_type[.qml.msvd;1]";"1b"];
    test["lapack_mn_type[.qml.msvd;2]";"1b"];
    lapack_nn_np_type:{
        f:.[{x[y;z];}x;;`$];
        $[y=0;all(::)~'f each(((0 0;0 0.);0 0);(((0 0;0 0.);(0 0 0.;0 0 0))));
          y=1;all`type~'f each(``;(`;0 0);((0 0;0 0.);`);
            ((0 0;0 0.);enlist 0#0);(();0#0));
          y=2;all`length~'f each(((0 0.;0 0 0.);0 0);((0 0;0 0.);(0 0;0 0 0.)));
          y=3;all`length~'f each(((0 0;0 0.);0 0 0);((0 0;0 0.);(0 0;0 0;0 0));
            ((0 0 0;0 0 0.);(0 0;0 0)));
          / not for .qml.mm:
          y=4;`length~f((0 0 0;0 0 0);0 0 0);
          '`]};
    lapack_mn_np_type:{
        f:.[{x[y;z];}x;;`$];
        $[y=0;(::)~f((0 0 0;0 0 0);0 0 0);
          '`]};
    lapack_0n_np_type:{
        f:.[{x[y;z];}x;;`$];
        $[y=0;all(::)~'f each
            (((1 1;0 1);0 0);((0 1;0 0);0 0);((1 0;1 1);0 0);((0 0;1 0);0 0));
          y=1;all`domain~'f each
            (((1 1;1 1);0 0);((0 1;1 0);0 0);((1 0 1;1 1 0;0 0 1);0 0 0));
          '`]};
    test["lapack_nn_np_type[.qml.mm;0]";"1b"];
    test["lapack_nn_np_type[.qml.mm;1]";"1b"];
    test["lapack_nn_np_type[.qml.mm;2]";"1b"];
    test["lapack_nn_np_type[.qml.mm;3]";"1b"];
    test["lapack_mn_np_type[.qml.mm;0]";"1b"];
    test["lapack_nn_np_type[.qml.ms;0]";"1b"];
    test["lapack_nn_np_type[.qml.ms;1]";"1b"];
    test["lapack_nn_np_type[.qml.ms;2]";"1b"];
    test["lapack_nn_np_type[.qml.ms;3]";"1b"];
    test["lapack_nn_np_type[.qml.ms;4]";"1b"];
    test["lapack_0n_np_type[.qml.ms;0]";"1b"];
    test["lapack_0n_np_type[.qml.ms;1]";"1b"];
    test["lapack_nn_np_type[.qml.mls;0]";"1b"];
    test["lapack_nn_np_type[.qml.mls;1]";"1b"];
    test["lapack_nn_np_type[.qml.mls;2]";"1b"];
    test["lapack_nn_np_type[.qml.mls;3]";"1b"];
    test["lapack_nn_np_type[.qml.mls;4]";"1b"];
    test["lapack_nn_np_type[.qml.mlsx`equi;0]";"1b"];
    test["lapack_nn_np_type[.qml.mlsx`equi;1]";"1b"];
    test["lapack_nn_np_type[.qml.mlsx`equi;2]";"1b"];
    test["lapack_nn_np_type[.qml.mlsx`equi;3]";"1b"];
    test["lapack_nn_np_type[.qml.mlsx`equi;4]";"1b"];
    lapack_mn_mp_type:{
        f:.[{x[y;z];}x;;`$];
        $[y=0;all(::)~'f each(((0 0;0 0);0 0);((0 0;0 0);(0 0;0 0)));
          y=1;all(::)~'f each(((0 0;0 0;0 0);0 0 0);((0 0 0;0 0 0);0 0));
          y=2;all(::)~'f each
            (((0 0;0 0;0 0);(0 0;0 0;0 0));((0 0 0;0 0 0);(0 0;0 0)));
          y=3;all`type~'f each(``;(`;0 0);((0 0;0 0);`));
          y=4;all`length~'f each(((0 0;0 0 0);0 0);((0 0;0 0);(0 0;0 0 0)));
          y=5;all`length~'f each
            (((0 0 0;0 0 0);0 0 0);((0 0 0;0 0 0);(0 0;0 0;0 0)));
            '`]};
    test["lapack_mn_mp_type[.qml.mlsq;0]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsq;1]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsq;2]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsq;3]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsq;4]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsq;5]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsqx`svd;0]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsqx`svd;1]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsqx`svd;2]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsqx`svd;3]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsqx`svd;4]";"1b"];
    test["lapack_mn_mp_type[.qml.mlsqx`svd;5]";"1b"];
    poly_type:{
        f:@[{.qml.poly x;};;`$];
        $[x=0;all(::)~'f each(1 0;(1.;0);(1;0.);(1.;0 0.));
          x=1;all`type~'f each(`;``;(0.;0 0;`;0.);0.;0;(0.;(0.;0 0.)));
          x=2;all`length~'f each(0#0.;();(0.;());(0.;1#0.);(0.;3#0 0 0.));
          x=3;all(::)~'f each((1 0;1);(0 1;1));
          x=4;all`roots~'f each(0 1;(0;1 0);(0 0;1));
          '`]};
    test["poly_type 0";"1b"];
    test["poly_type 1";"1b"];
    test["poly_type 2";"1b"];
    test["poly_type 3";"1b"];
    test["poly_type 4";"1b"];
    lapack_opt:{
        all`opt~'@[get;;`$]each((.qml.mlsx;`eqiu;0;0);(.qml.mlsqx;`sdv;0;0))};
    test["lapack_opt[]";"1b"];

    mem[pass]:first system"w"];

diff:any((passed@:0)<>passed),(total@:0)<>total;
-1"Passed ",$[passed=total;"all ";string[passed]," of "],
    string[total]," tests.";
if[diff;-1"Second pass gave different results."];
if[mem:(<>). mem;-1"Possible memory leak detected."];
if[passed<>total;exit 1];if[mem;exit 2];if[diff;exit 5];
if[not count mttests _:`;-1"Run with -s 16 to test thread safety.";exit 3];

-1"Testing thread safety. This may take a few minutes.";
passed:total:0;
{
    total+:1;passed+:r:all (value y[;0]@) peach {neg[count x]?x} where y[;1];
    if[not r;-1"Failed ",string[x]," thread safety."];
    }'[key mttests;value mttests];

-1"Passed ",$[passed=total;"all ";string[passed]," of "],
    string[total]," thread safety tests.";
if[passed<>total;exit 4];
-1"Thread safety testing is stochastic in nature, ",
    "run multiple times to be sure.";
exit 0;
